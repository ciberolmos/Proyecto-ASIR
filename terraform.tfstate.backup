{
  "version": 4,
  "terraform_version": "0.14.3",
  "serial": 313,
  "lineage": "afec9c57-e481-4c52-d2a3-4afbe95f9b57",
  "outputs": {
    "SSH_Argocd": {
      "value": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\nQyNTUxOQAAACB0GCJiBKVhjud/cupd2c+k0KW/rq3Bp8kKle6+EZesZwAAAKBa3qAvWt6g\nLwAAAAtzc2gtZWQyNTUxOQAAACB0GCJiBKVhjud/cupd2c+k0KW/rq3Bp8kKle6+EZesZw\nAAAEAgMRbCo9Eqtj/p4ImPWfawMoZxZj3/9w5KjQtHUPJuD3QYImIEpWGO539y6l3Zz6TQ\npb+urcGnyQqV7r4Rl6xnAAAAFmNpYmVyb2xtb3NAaG90bWFpbC5jb20BAgMEBQYH\n-----END OPENSSH PRIVATE KEY-----\n",
      "type": "string"
    },
    "gke_num_nodes": {
      "value": 2,
      "type": "number"
    },
    "gke_password": {
      "value": "4430",
      "type": "string"
    },
    "gke_username": {
      "value": "olmos",
      "type": "string"
    },
    "google_compute_global_address1": {
      "value": "34.127.28.78",
      "type": "string"
    },
    "google_compute_global_address2": {
      "value": "34.127.109.4",
      "type": "string"
    },
    "google_dns_managed_zone_name_servers": {
      "value": [
        "ns-cloud-e1.googledomains.com.",
        "ns-cloud-e2.googledomains.com.",
        "ns-cloud-e3.googledomains.com.",
        "ns-cloud-e4.googledomains.com."
      ],
      "type": [
        "list",
        "string"
      ]
    },
    "kubernetes_cluster_endpoint": {
      "value": "35.203.132.168",
      "type": "string"
    },
    "kubernetes_cluster_name": {
      "value": "proyecto-asir-gke",
      "type": "string"
    },
    "region": {
      "value": "us-west1",
      "type": "string"
    },
    "zone": {
      "value": "us-west1-a",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "google_client_config",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_token": "ya29.c.b0AXv0zTPyuhnXDKyFTy6b_qetdfpTPDEiLl3OnYHatvnStHChydgSFr3nN93uW3CDUNz6I8KhKKl4o8kykVaX8Ryw_HMOZa-k7xWaV0cBchlfKao8_1Ymf6nhCzpYhTd3EfgkpZ08brzeqrLwWwEbJw65vPYyIdDlQNIw6ryHI01AF1ZkYWlACHhdSqkZqykwMA78mZyl4B0Dh6AgXQSXwxhe4futXAwE",
            "id": "projects/proyecto-asir-333123/regions/us-west1/zones/us-west1-a",
            "project": "proyecto-asir-333123",
            "region": "us-west1",
            "zone": "us-west1-a"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "google_client_openid_userinfo",
      "name": "terraform_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "email": "kubernetes@proyecto-asir-333123.iam.gserviceaccount.com",
            "id": "kubernetes@proyecto-asir-333123.iam.gserviceaccount.com"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_address",
      "name": "ipv4_1",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": "34.127.28.78",
            "address_type": "EXTERNAL",
            "creation_timestamp": "2021-12-11T13:08:13.537-08:00",
            "description": "",
            "id": "projects/proyecto-asir-333123/regions/us-west1/addresses/ipv4-address1",
            "name": "ipv4-address1",
            "network": "",
            "network_tier": "PREMIUM",
            "prefix_length": 0,
            "project": "proyecto-asir-333123",
            "purpose": "",
            "region": "us-west1",
            "self_link": "https://www.googleapis.com/compute/v1/projects/proyecto-asir-333123/regions/us-west1/addresses/ipv4-address1",
            "subnetwork": "",
            "timeouts": null,
            "users": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwfX0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_address",
      "name": "ipv4_2",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": "34.127.109.4",
            "address_type": "EXTERNAL",
            "creation_timestamp": "2021-12-11T13:08:13.418-08:00",
            "description": "",
            "id": "projects/proyecto-asir-333123/regions/us-west1/addresses/ipv4-address2",
            "name": "ipv4-address2",
            "network": "",
            "network_tier": "PREMIUM",
            "prefix_length": 0,
            "project": "proyecto-asir-333123",
            "purpose": "",
            "region": "us-west1",
            "self_link": "https://www.googleapis.com/compute/v1/projects/proyecto-asir-333123/regions/us-west1/addresses/ipv4-address2",
            "subnetwork": "",
            "timeouts": null,
            "users": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwfX0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_network",
      "name": "vpc_proyecto_asir",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "auto_create_subnetworks": true,
            "delete_default_routes_on_create": false,
            "description": "",
            "gateway_ipv4": "",
            "id": "projects/proyecto-asir-333123/global/networks/proyecto-asir-network",
            "mtu": 0,
            "name": "proyecto-asir-network",
            "project": "proyecto-asir-333123",
            "routing_mode": "REGIONAL",
            "self_link": "https://www.googleapis.com/compute/v1/projects/proyecto-asir-333123/global/networks/proyecto-asir-network",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwLCJ1cGRhdGUiOjI0MDAwMDAwMDAwMH19"
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_subnetwork",
      "name": "subnet_proyecto_asir",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "creation_timestamp": "2021-12-11T11:07:15.436-08:00",
            "description": "",
            "external_ipv6_prefix": "",
            "fingerprint": null,
            "gateway_address": "10.10.0.1",
            "id": "projects/proyecto-asir-333123/regions/us-west1/subnetworks/subnet-proyecto-asir",
            "ip_cidr_range": "10.10.0.0/24",
            "ipv6_access_type": "",
            "ipv6_cidr_range": "",
            "log_config": [],
            "name": "subnet-proyecto-asir",
            "network": "https://www.googleapis.com/compute/v1/projects/proyecto-asir-333123/global/networks/proyecto-asir-network",
            "private_ip_google_access": false,
            "private_ipv6_google_access": "DISABLE_GOOGLE_ACCESS",
            "project": "proyecto-asir-333123",
            "purpose": "PRIVATE",
            "region": "us-west1",
            "role": "",
            "secondary_ip_range": [
              {
                "ip_cidr_range": "10.24.0.0/14",
                "range_name": "gke-proyecto-asir-gke-pods-0d2a99b7"
              },
              {
                "ip_cidr_range": "10.28.0.0/20",
                "range_name": "gke-proyecto-asir-gke-services-0d2a99b7"
              }
            ],
            "self_link": "https://www.googleapis.com/compute/v1/projects/proyecto-asir-333123/regions/us-west1/subnetworks/subnet-proyecto-asir",
            "stack_type": "IPV4_ONLY",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozNjAwMDAwMDAwMDAsImRlbGV0ZSI6MzYwMDAwMDAwMDAwLCJ1cGRhdGUiOjM2MDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.vpc_proyecto_asir"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_container_cluster",
      "name": "primary",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "addons_config": [
              {
                "cloudrun_config": [],
                "horizontal_pod_autoscaling": [
                  {
                    "disabled": true
                  }
                ],
                "http_load_balancing": [
                  {
                    "disabled": true
                  }
                ],
                "network_policy_config": [
                  {
                    "disabled": true
                  }
                ]
              }
            ],
            "authenticator_groups_config": [],
            "cluster_autoscaling": [
              {
                "auto_provisioning_defaults": [],
                "enabled": false,
                "resource_limits": []
              }
            ],
            "cluster_ipv4_cidr": "10.24.0.0/14",
            "confidential_nodes": [],
            "database_encryption": [
              {
                "key_name": "",
                "state": "DECRYPTED"
              }
            ],
            "datapath_provider": "",
            "default_max_pods_per_node": 110,
            "default_snat_status": [
              {
                "disabled": false
              }
            ],
            "description": "",
            "enable_autopilot": false,
            "enable_binary_authorization": false,
            "enable_intranode_visibility": false,
            "enable_kubernetes_alpha": false,
            "enable_legacy_abac": false,
            "enable_shielded_nodes": true,
            "enable_tpu": false,
            "endpoint": "35.203.132.168",
            "id": "projects/proyecto-asir-333123/locations/us-west1-a/clusters/proyecto-asir-gke",
            "initial_node_count": 1,
            "ip_allocation_policy": [
              {
                "cluster_ipv4_cidr_block": "10.24.0.0/14",
                "cluster_secondary_range_name": "gke-proyecto-asir-gke-pods-0d2a99b7",
                "services_ipv4_cidr_block": "10.28.0.0/20",
                "services_secondary_range_name": "gke-proyecto-asir-gke-services-0d2a99b7"
              }
            ],
            "label_fingerprint": "a9dc16a7",
            "location": "us-west1-a",
            "logging_config": [
              {
                "enable_components": [
                  "SYSTEM_COMPONENTS",
                  "WORKLOADS"
                ]
              }
            ],
            "logging_service": "logging.googleapis.com/kubernetes",
            "maintenance_policy": [],
            "master_auth": [
              {
                "client_certificate": "",
                "client_certificate_config": [
                  {
                    "issue_client_certificate": false
                  }
                ],
                "client_key": "",
                "cluster_ca_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVMRENDQXBTZ0F3SUJBZ0lRUnJURXJoODR3MGtvZGhOVzdMT1lRREFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRek1EY3pNekk1Tnkwd01HUTFMVFJtTkRBdE9EZGlPQzFrTW1FMlpEWTRaamxrWTJFdwpJQmNOTWpFeE1qRXhNVGd3TnpRd1doZ1BNakExTVRFeU1EUXhPVEEzTkRCYU1DOHhMVEFyQmdOVkJBTVRKRE13Ck56TXpNamszTFRBd1pEVXROR1kwTUMwNE4ySTRMV1F5WVRaa05qaG1PV1JqWVRDQ0FhSXdEUVlKS29aSWh2Y04KQVFFQkJRQURnZ0dQQURDQ0FZb0NnZ0dCQU4vbmxYdjhyN3F1bXpvS2ZPck44TlJxVjBjRmNERmdOWTlHeDZNTgpEc0I5U212QU9nbnhkSVFPbW9SeXc5THpobDN5bUQ3UGZaT2lKS0FMbUppcmQ4M2JSdjRGSmZpcmVWZGcyQ0lmCmkvU3M1Q2VVR0Ywc0RnaU9UUG42T3VUNUhWWXJOcU5zRWg3bHZPbk0wY2dtcitRNWNWLzJmWUJTSng3T05ZTnUKbUViZkhVcDlpMkJmWmd0YVZDczgvTGlOc3l3THh5S2E2QVh0SEVjUUUrN3VwbFJUVU13TGRPNFYxTm8xcUNZMgpvdTlaY1hzM3kxMVBOWmJhU29FbnY2YVlPbnZhMmpOU3h1MGpwK2FZeHZEaC9vbjl6NmYySXJDeVBDa29vM1d3CkxmZHR1OWxFTDhwSkc4eHYwbVZxL29GUGUvdEQ1Y0xJMTY4WldndlRqS0ZYeVFFUGNOVE1odXhJNmNxcXVvSW8KeTE3OXJJblNhSGp1eTArRElNRnlWcldYMEFhRk9ZMmZIaEhaYy80SUFnc0cwdlc1T0E4Z094QlloeDdFa1VGcgpNUE9ZaVBuMzlBeFI3bEJnVjlXV1RtL0ZMamFPNWZrb0NGYlpGZWlDQUFBcmpJNi9acDF6elRUNU03ZFpZWXpaCnA4QlI3SThzOTNjWWNSbkd5aVllOHA2UVd3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WUQKVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUwUjFlVVBGeVBXYUJhUmJ1Nm9CU2owQW5WREV3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dHQkFJM29OK1hJZnROUFUxZVVkN3ZERTN2WVRIakcyV1V3SWV1d1NheHJrS0xzCmloVjduYmhpaUtjdHFBM1pRdGJQMERXczdaWEU3cGRKMDE1b3VjcnJKNG9qeGpyQkFWMVFWOGthNGsvOHlZTnoKWXQyUnVaQSt6YlZsbDdVaUthdGtFMHptd1krdm5jeC9DNVd6cXNrWm1xV200eWhDbVh4RkJOeWg4cjFXQncvMQpFdWZTZXpvcUkzcWsyaDU3SjBLck1BT2JjWFUydUt1aGJQamVlcyt4emtIY3pWZk9HOGtnVUdDNmRKbmc3aDNRCklwQXZSdzhpZktwTVJnU0piMjdCNHBGNE80aU5wc29WcjF4Nmpvdm0zTit1ZXB2ek8vcGh5aVRoYmxNN2ZHNFMKODhRaVg0c3NYU2pCS1B2NE9oeGY1akE2b1N2ektDY0tKUzJMQnZ2YkQzelgrUXo3eFFtRXJ3dGRYRzJpZ3BoegpNak5sUytwOThVRHlBdDM0T1RUNnJ6MkVkTTQ1TEk4OEE0MnNMUEFPZ2VpQ05yMzRFWUYycGRORFpSeDZINjl1Cm1hbmlyekJjMllHM2FQQ0pkU3pDSkNyNUJYVjhJTlR4MHRrTER0eWFuc2xLN3BiNXBZMzEvTHpZbmRuWTdjZDYKaWZ1YVlyZ0NwSEQzbS9ZQlVrTHV6UT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
              }
            ],
            "master_authorized_networks_config": [],
            "master_version": "1.21.5-gke.1302",
            "min_master_version": null,
            "monitoring_config": [
              {
                "enable_components": [
                  "SYSTEM_COMPONENTS"
                ]
              }
            ],
            "monitoring_service": "monitoring.googleapis.com/kubernetes",
            "name": "proyecto-asir-gke",
            "network": "projects/proyecto-asir-333123/global/networks/proyecto-asir-network",
            "network_policy": [
              {
                "enabled": false,
                "provider": "PROVIDER_UNSPECIFIED"
              }
            ],
            "networking_mode": "VPC_NATIVE",
            "node_config": [
              {
                "disk_size_gb": 100,
                "disk_type": "pd-standard",
                "gcfs_config": [],
                "guest_accelerator": [],
                "image_type": "COS_CONTAINERD",
                "labels": {
                  "env": "proyecto-asir-333123"
                },
                "local_ssd_count": 0,
                "machine_type": "e2-medium",
                "metadata": {
                  "disable-legacy-endpoints": "true"
                },
                "min_cpu_platform": "",
                "oauth_scopes": [
                  "https://www.googleapis.com/auth/logging.write",
                  "https://www.googleapis.com/auth/monitoring"
                ],
                "preemptible": false,
                "service_account": "default",
                "shielded_instance_config": [
                  {
                    "enable_integrity_monitoring": true,
                    "enable_secure_boot": false
                  }
                ],
                "tags": [
                  "gke-node",
                  "proyecto-asir-gke"
                ],
                "taint": [],
                "workload_metadata_config": []
              }
            ],
            "node_locations": [],
            "node_pool": [
              {
                "autoscaling": [
                  {
                    "max_node_count": 5,
                    "min_node_count": 2
                  }
                ],
                "initial_node_count": 2,
                "instance_group_urls": [
                  "https://www.googleapis.com/compute/v1/projects/proyecto-asir-333123/zones/us-west1-a/instanceGroupManagers/gke-proyecto-asir-gk-proyecto-asir-gk-8ffe1228-grp"
                ],
                "managed_instance_group_urls": [
                  "https://www.googleapis.com/compute/v1/projects/proyecto-asir-333123/zones/us-west1-a/instanceGroups/gke-proyecto-asir-gk-proyecto-asir-gk-8ffe1228-grp"
                ],
                "management": [
                  {
                    "auto_repair": true,
                    "auto_upgrade": true
                  }
                ],
                "max_pods_per_node": 110,
                "name": "proyecto-asir-gke-node-pool",
                "name_prefix": "",
                "node_config": [
                  {
                    "disk_size_gb": 100,
                    "disk_type": "pd-standard",
                    "gcfs_config": [],
                    "guest_accelerator": [],
                    "image_type": "COS_CONTAINERD",
                    "labels": {
                      "env": "proyecto-asir-333123"
                    },
                    "local_ssd_count": 0,
                    "machine_type": "e2-medium",
                    "metadata": {
                      "disable-legacy-endpoints": "true"
                    },
                    "min_cpu_platform": "",
                    "oauth_scopes": [
                      "https://www.googleapis.com/auth/logging.write",
                      "https://www.googleapis.com/auth/monitoring"
                    ],
                    "preemptible": false,
                    "service_account": "default",
                    "shielded_instance_config": [
                      {
                        "enable_integrity_monitoring": true,
                        "enable_secure_boot": false
                      }
                    ],
                    "tags": [
                      "gke-node",
                      "proyecto-asir-gke"
                    ],
                    "taint": [],
                    "workload_metadata_config": []
                  }
                ],
                "node_count": 2,
                "node_locations": [
                  "us-west1-a"
                ],
                "upgrade_settings": [
                  {
                    "max_surge": 1,
                    "max_unavailable": 0
                  }
                ],
                "version": "1.21.5-gke.1302"
              }
            ],
            "node_version": "1.21.5-gke.1302",
            "operation": null,
            "private_cluster_config": [],
            "private_ipv6_google_access": "",
            "project": "proyecto-asir-333123",
            "release_channel": [
              {
                "channel": "REGULAR"
              }
            ],
            "remove_default_node_pool": true,
            "resource_labels": {},
            "resource_usage_export_config": [],
            "self_link": "https://container.googleapis.com/v1/projects/proyecto-asir-333123/zones/us-west1-a/clusters/proyecto-asir-gke",
            "services_ipv4_cidr": "10.28.0.0/20",
            "subnetwork": "projects/proyecto-asir-333123/regions/us-west1/subnetworks/subnet-proyecto-asir",
            "timeouts": null,
            "tpu_ipv4_cidr_block": "",
            "vertical_pod_autoscaling": [],
            "workload_identity_config": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAwLCJkZWxldGUiOjI0MDAwMDAwMDAwMDAsInJlYWQiOjI0MDAwMDAwMDAwMDAsInVwZGF0ZSI6MzYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.vpc_proyecto_asir",
            "google_compute_subnetwork.subnet_proyecto_asir"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_container_node_pool",
      "name": "primary_nodes",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "autoscaling": [
              {
                "max_node_count": 5,
                "min_node_count": 2
              }
            ],
            "cluster": "proyecto-asir-gke",
            "id": "projects/proyecto-asir-333123/locations/us-west1-a/clusters/proyecto-asir-gke/nodePools/proyecto-asir-gke-node-pool",
            "initial_node_count": 2,
            "instance_group_urls": [
              "https://www.googleapis.com/compute/v1/projects/proyecto-asir-333123/zones/us-west1-a/instanceGroupManagers/gke-proyecto-asir-gk-proyecto-asir-gk-8ffe1228-grp"
            ],
            "location": "us-west1-a",
            "managed_instance_group_urls": [
              "https://www.googleapis.com/compute/v1/projects/proyecto-asir-333123/zones/us-west1-a/instanceGroups/gke-proyecto-asir-gk-proyecto-asir-gk-8ffe1228-grp"
            ],
            "management": [
              {
                "auto_repair": true,
                "auto_upgrade": true
              }
            ],
            "max_pods_per_node": 110,
            "name": "proyecto-asir-gke-node-pool",
            "name_prefix": "",
            "node_config": [
              {
                "disk_size_gb": 100,
                "disk_type": "pd-standard",
                "gcfs_config": [],
                "guest_accelerator": [],
                "image_type": "COS_CONTAINERD",
                "labels": {
                  "env": "proyecto-asir-333123"
                },
                "local_ssd_count": 0,
                "machine_type": "e2-medium",
                "metadata": {
                  "disable-legacy-endpoints": "true"
                },
                "min_cpu_platform": "",
                "oauth_scopes": [
                  "https://www.googleapis.com/auth/logging.write",
                  "https://www.googleapis.com/auth/monitoring"
                ],
                "preemptible": false,
                "service_account": "default",
                "shielded_instance_config": [
                  {
                    "enable_integrity_monitoring": true,
                    "enable_secure_boot": false
                  }
                ],
                "tags": [
                  "gke-node",
                  "proyecto-asir-gke"
                ],
                "taint": [],
                "workload_metadata_config": []
              }
            ],
            "node_count": 2,
            "node_locations": [
              "us-west1-a"
            ],
            "operation": null,
            "project": "proyecto-asir-333123",
            "timeouts": null,
            "upgrade_settings": [
              {
                "max_surge": 1,
                "max_unavailable": 0
              }
            ],
            "version": "1.21.5-gke.1302"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.vpc_proyecto_asir",
            "google_compute_subnetwork.subnet_proyecto_asir",
            "google_container_cluster.primary"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_dns_managed_zone",
      "name": "parent_zone",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "Zona DNS del proyecto asir",
            "dns_name": "proyecto-asir.com.",
            "dnssec_config": [],
            "force_destroy": false,
            "forwarding_config": [],
            "id": "projects/proyecto-asir-333123/managedZones/zone-arp",
            "labels": null,
            "name": "zone-arp",
            "name_servers": [
              "ns-cloud-e1.googledomains.com.",
              "ns-cloud-e2.googledomains.com.",
              "ns-cloud-e3.googledomains.com.",
              "ns-cloud-e4.googledomains.com."
            ],
            "peering_config": [],
            "private_visibility_config": [],
            "project": "proyecto-asir-333123",
            "timeouts": null,
            "visibility": "public"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwLCJ1cGRhdGUiOjI0MDAwMDAwMDAwMH19"
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_dns_record_set",
      "name": "app_dns",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "projects/proyecto-asir-333123/managedZones/zone-arp/rrsets/app.proyecto-asir.com./A",
            "managed_zone": "zone-arp",
            "name": "app.proyecto-asir.com.",
            "project": "proyecto-asir-333123",
            "rrdatas": [
              "34.127.28.78"
            ],
            "ttl": 86400,
            "type": "A"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.google_client_config.current",
            "google_compute_address.ipv4_1",
            "google_container_cluster.primary",
            "google_dns_managed_zone.parent_zone",
            "helm_release.helm_argocd",
            "helm_release.helm_ingress_controler_sock-shop",
            "kubernetes_namespace.sock_shop"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_dns_record_set",
      "name": "argocd_dns",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "projects/proyecto-asir-333123/managedZones/zone-arp/rrsets/argocd.proyecto-asir.com./CNAME",
            "managed_zone": "zone-arp",
            "name": "argocd.proyecto-asir.com.",
            "project": "proyecto-asir-333123",
            "rrdatas": [
              "tools.proyecto-asir.com."
            ],
            "ttl": 86400,
            "type": "CNAME"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.google_client_config.current",
            "google_compute_address.ipv4_2",
            "google_container_cluster.primary",
            "google_container_node_pool.primary_nodes",
            "google_dns_managed_zone.parent_zone",
            "helm_release.helm_argocd",
            "helm_release.helm_ingress_controler_herramientas",
            "kubernetes_namespace.herramientas"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_dns_record_set",
      "name": "calcetines_dns",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "projects/proyecto-asir-333123/managedZones/zone-arp/rrsets/calcetines.proyecto-asir.com./CNAME",
            "managed_zone": "zone-arp",
            "name": "calcetines.proyecto-asir.com.",
            "project": "proyecto-asir-333123",
            "rrdatas": [
              "app.proyecto-asir.com."
            ],
            "ttl": 86400,
            "type": "CNAME"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.google_client_config.current",
            "google_compute_address.ipv4_1",
            "google_container_cluster.primary",
            "google_dns_managed_zone.parent_zone",
            "helm_release.helm_argocd",
            "helm_release.helm_ingress_controler_sock-shop",
            "kubernetes_namespace.sock_shop"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_dns_record_set",
      "name": "tools_dns",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "projects/proyecto-asir-333123/managedZones/zone-arp/rrsets/tools.proyecto-asir.com./A",
            "managed_zone": "zone-arp",
            "name": "tools.proyecto-asir.com.",
            "project": "proyecto-asir-333123",
            "rrdatas": [
              "34.127.109.4"
            ],
            "ttl": 86400,
            "type": "A"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.google_client_config.current",
            "google_compute_address.ipv4_2",
            "google_container_cluster.primary",
            "google_container_node_pool.primary_nodes",
            "google_dns_managed_zone.parent_zone",
            "helm_release.helm_argocd",
            "helm_release.helm_ingress_controler_herramientas",
            "kubernetes_namespace.herramientas"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "helm_argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "argo-cd",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argocd",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v2.1.7",
                "chart": "argo-cd",
                "name": "argocd",
                "namespace": "herramientas",
                "revision": 1,
                "values": "{\"configs\":{\"clusterCredentials\":[],\"knownHosts\":{\"data\":{\"ssh_known_hosts\":\"bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\n\"}},\"knownHostsAnnotations\":{},\"repositoryCredentials\":{\"argocd\":\"-----BEGIN OPENSSH PRIVATE KEY-----\\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\\nQyNTUxOQAAACB0GCJiBKVhjud/cupd2c+k0KW/rq3Bp8kKle6+EZesZwAAAKBa3qAvWt6g\\nLwAAAAtzc2gtZWQyNTUxOQAAACB0GCJiBKVhjud/cupd2c+k0KW/rq3Bp8kKle6+EZesZw\\nAAAEAgMRbCo9Eqtj/p4ImPWfawMoZxZj3/9w5KjQtHUPJuD3QYImIEpWGO539y6l3Zz6TQ\\npb+urcGnyQqV7r4Rl6xnAAAAFmNpYmVyb2xtb3NAaG90bWFpbC5jb20BAgMEBQYH\\n-----END OPENSSH PRIVATE KEY-----\\n\"},\"secret\":{\"annotations\":{},\"argocdServerTlsConfig\":{},\"bitbucketServerSecret\":\"\",\"bitbucketUUID\":\"\",\"createSecret\":true,\"extra\":{},\"githubSecret\":\"\",\"gitlabSecret\":\"\",\"gogsSecret\":\"\"},\"tlsCerts\":{},\"tlsCertsAnnotations\":{}},\"controller\":{\"affinity\":{},\"args\":{\"appResyncPeriod\":\"180\",\"operationProcessors\":\"10\",\"selfHealTimeout\":\"5\",\"statusProcessors\":\"20\"},\"clusterAdminAccess\":{\"enabled\":true},\"clusterRoleRules\":{\"enabled\":false,\"rules\":[]},\"containerPort\":8082,\"containerSecurityContext\":{},\"enableStatefulSet\":false,\"env\":[],\"envFrom\":[],\"extraArgs\":[],\"image\":{\"imagePullPolicy\":null,\"repository\":null,\"tag\":null},\"livenessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"logFormat\":\"text\",\"logLevel\":\"info\",\"metrics\":{\"enabled\":false,\"rules\":{\"enabled\":false,\"spec\":[]},\"service\":{\"annotations\":{},\"labels\":{},\"servicePort\":8082},\"serviceMonitor\":{\"enabled\":false,\"interval\":\"30s\"}},\"name\":\"application-controller\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":1,\"resources\":{},\"service\":{\"annotations\":{},\"labels\":{},\"port\":8082,\"portName\":\"https-controller\"},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"name\":\"argocd-application-controller\"},\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]},\"dex\":{\"affinity\":{},\"containerPortGrpc\":5557,\"containerPortHttp\":5556,\"containerPortMetrics\":5558,\"containerSecurityContext\":{},\"enabled\":true,\"env\":[],\"envFrom\":[],\"image\":{\"imagePullPolicy\":\"IfNotPresent\",\"repository\":\"ghcr.io/dexidp/dex\",\"tag\":\"v2.27.0\"},\"initImage\":{\"imagePullPolicy\":null,\"repository\":null,\"tag\":null},\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"labels\":{}},\"serviceMonitor\":{\"enabled\":false,\"interval\":\"30s\"}},\"name\":\"dex-server\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"resources\":{},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"name\":\"argocd-dex-server\"},\"servicePortGrpc\":5557,\"servicePortHttp\":5556,\"servicePortMetrics\":5558,\"tolerations\":[],\"volumeMounts\":[{\"mountPath\":\"/shared\",\"name\":\"static-files\"}],\"volumes\":[{\"emptyDir\":{},\"name\":\"static-files\"}]},\"fullnameOverride\":\"\",\"global\":{\"hostAliases\":[],\"image\":{\"imagePullPolicy\":\"IfNotPresent\",\"repository\":\"quay.io/argoproj/argocd\",\"tag\":\"v2.0.3\"},\"imagePullSecrets\":[],\"securityContext\":{}},\"installCRDs\":true,\"kubeVersionOverride\":\"\",\"nameOverride\":\"argocd\",\"openshift\":{\"enabled\":false},\"redis\":{\"affinity\":{},\"containerPort\":6379,\"containerSecurityContext\":{},\"enabled\":true,\"env\":[],\"envFrom\":[],\"extraArgs\":[],\"image\":{\"imagePullPolicy\":\"IfNotPresent\",\"repository\":\"redis\",\"tag\":\"6.2.2-alpine\"},\"name\":\"redis\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"resources\":{},\"securityContext\":{\"fsGroup\":1000,\"runAsGroup\":1000,\"runAsNonRoot\":true,\"runAsUser\":1000},\"servicePort\":6379,\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]},\"redis-ha\":{\"enabled\":false,\"exporter\":{\"enabled\":true},\"haproxy\":{\"enabled\":true,\"metrics\":{\"enabled\":true}},\"image\":{\"tag\":\"6.2.2-alpine\"},\"persistentVolume\":{\"enabled\":false},\"redis\":{\"config\":{\"save\":\"\\\"\\\"\"},\"masterGroupName\":\"argocd\"}},\"repoServer\":{\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":5,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":80,\"targetMemoryUtilizationPercentage\":80},\"containerPort\":8081,\"containerSecurityContext\":{},\"env\":[],\"envFrom\":[],\"extraArgs\":[],\"image\":{\"imagePullPolicy\":null,\"repository\":null,\"tag\":null},\"livenessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"logFormat\":\"text\",\"logLevel\":\"info\",\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"labels\":{},\"servicePort\":8084},\"serviceMonitor\":{\"enabled\":false,\"interval\":\"30s\"}},\"name\":\"repo-server\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":1,\"resources\":{},\"service\":{\"annotations\":{},\"labels\":{},\"port\":8081,\"portName\":\"https-repo-server\"},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":false},\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]},\"server\":{\"GKEbackendConfig\":{\"enabled\":false,\"spec\":{}},\"additionalApplications\":[{\"additionalAnnotations\":{},\"additionalLabels\":{},\"destination\":{\"namespace\":\"sock-shop\",\"server\":\"https://kubernetes.default.svc\"},\"name\":\"demoapp\",\"project\":\"default\",\"source\":{\"path\":\".\",\"repoURL\":\"git@github.com:arpovea/arp_demo_app.git\",\"targetRevision\":\"HEAD\"},\"syncPolicy\":{\"automated\":{\"prune\":true,\"selfHeal\":true}}}],\"additionalProjects\":[],\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":5,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":80,\"targetMemoryUtilizationPercentage\":80},\"certificate\":{\"additionalHosts\":[],\"domain\":\"argocd.example.com\",\"enabled\":false,\"issuer\":{}},\"clusterAdminAccess\":{\"enabled\":true},\"config\":{\"application.instanceLabelKey\":\"argocd.argoproj.io/instance\",\"repositories\":\"- url: git@github.com:arpovea/arp_demo_app.git\\n  sshPrivateKeySecret:\\n    name: argocd-repository-credentials\\n    key: argocd\\n\",\"url\":\"https://argocd.example.com\"},\"configAnnotations\":{},\"configEnabled\":true,\"containerPort\":8080,\"containerSecurityContext\":{},\"env\":[],\"envFrom\":[],\"extraArgs\":[],\"extraContainers\":[],\"image\":{\"imagePullPolicy\":null,\"repository\":null,\"tag\":null},\"ingress\":{\"annotations\":{},\"enabled\":false,\"extraPaths\":[],\"hosts\":[],\"https\":false,\"ingressClassName\":\"\",\"labels\":{},\"paths\":[\"/\"],\"tls\":[]},\"ingressGrpc\":{\"annotations\":{},\"enabled\":false,\"extraPaths\":[],\"hosts\":[],\"https\":false,\"ingressClassName\":\"\",\"labels\":{},\"paths\":[\"/\"],\"tls\":[]},\"lifecycle\":{},\"livenessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"logFormat\":\"text\",\"logLevel\":\"info\",\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"labels\":{},\"servicePort\":8083},\"serviceMonitor\":{\"enabled\":false,\"interval\":\"30s\"}},\"name\":\"server\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"rbacConfig\":{},\"rbacConfigAnnotations\":{},\"rbacConfigCreate\":true,\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":1,\"resources\":{},\"route\":{\"enabled\":false,\"hostname\":\"\"},\"service\":{\"annotations\":{},\"externalIPs\":[],\"externalTrafficPolicy\":\"\",\"labels\":{},\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"namedTargetPort\":true,\"nodePortHttp\":30080,\"nodePortHttps\":30443,\"servicePortHttp\":80,\"servicePortHttpName\":\"http\",\"servicePortHttps\":443,\"servicePortHttpsName\":\"https\",\"type\":\"NodePort\"},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"name\":\"argocd-server\"},\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]}}",
                "version": "3.28.0"
              }
            ],
            "name": "argocd",
            "namespace": "herramientas",
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "## ArgoCD configuration\n## Ref: https://github.com/argoproj/argo-cd\n##\nnameOverride: argocd\nfullnameOverride: \"\"\nkubeVersionOverride: \"\"\n\n# Optional CRD installation for those without Helm hooks\ninstallCRDs: true\n\nglobal:\n  image:\n    repository: quay.io/argoproj/argocd\n    tag: v2.0.3\n    imagePullPolicy: IfNotPresent\n  securityContext: {}\n  #  runAsUser: 999\n  #  runAsGroup: 999\n  #  fsGroup: 999\n  imagePullSecrets: []\n  hostAliases: []\n  # - ip: 10.20.30.40\n  #   hostnames:\n  #   - git.myhostname\n\n## Controller\ncontroller:\n  name: application-controller\n\n  image:\n    repository: # defaults to global.image.repository\n    tag: # defaults to global.image.tag\n    imagePullPolicy: # IfNotPresent\n\n  # If changing the number of replicas you must pass the number as ARGOCD_CONTROLLER_REPLICAS as an environment variable\n  replicas: 1\n\n  # Deploy the application as a StatefulSet instead of a Deployment, this is required for HA capability.\n  # This is a feature flag that will become the default in chart version 3.x\n  enableStatefulSet: false\n\n  ## Argo controller commandline flags\n  args:\n    statusProcessors: \"20\"\n    operationProcessors: \"10\"\n    appResyncPeriod: \"180\"\n    selfHealTimeout: \"5\"\n\n  ## Argo controller log format: text|json\n  logFormat: text\n  ## Argo controller log level\n  logLevel: info\n\n  ## Additional command line arguments to pass to argocd-controller\n  ##\n  extraArgs: []\n\n  ## Environment variables to pass to argocd-controller\n  ##\n  env:\n    []\n    # - name: \"ARGOCD_CONTROLLER_REPLICAS\"\n    #   value: \"\"\n\n  ## envFrom to pass to argocd-controller\n  ##\n  envFrom: []\n  # - configMapRef:\n  #     name: config-map-name\n  # - secretRef:\n  #     name: secret-name\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to controller pods\n  ##\n  podLabels: {}\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n    # readOnlyRootFilesystem: true\n\n  ## Configures the controller port\n  containerPort: 8082\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n\n  ## Additional volumeMounts to the controller main container.\n  volumeMounts: []\n\n  ## Additional volumes to the controller pod.\n  volumes: []\n\n  ## Controller service configuration\n  service:\n    annotations: {}\n    labels: {}\n    port: 8082\n    portName: https-controller\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  resources: {}\n  #  limits:\n  #    cpu: 500m\n  #    memory: 512Mi\n  #  requests:\n  #    cpu: 250m\n  #    memory: 256Mi\n\n  serviceAccount:\n    create: true\n    name: argocd-application-controller\n    ## Annotations applied to created service account\n    annotations: {}\n    ## Automount API credentials for the Service Account\n    automountServiceAccountToken: true\n\n  ## Server metrics controller configuration\n  metrics:\n    enabled: false\n    service:\n      annotations: {}\n      labels: {}\n      servicePort: 8082\n    serviceMonitor:\n      enabled: false\n      interval: 30s\n    #   selector:\n    #     prometheus: kube-prometheus\n    #   namespace: monitoring\n    #   additionalLabels: {}\n    rules:\n      enabled: false\n      spec: []\n      # - alert: ArgoAppMissing\n      #   expr: |\n      #     absent(argocd_app_info)\n      #   for: 15m\n      #   labels:\n      #     severity: critical\n      #   annotations:\n      #     summary: \"[ArgoCD] No reported applications\"\n      #     description: \u003e\n      #       ArgoCD has not reported any applications data for the past 15 minutes which\n      #       means that it must be down or not functioning properly.  This needs to be\n      #       resolved for this cloud to continue to maintain state.\n      # - alert: ArgoAppNotSynced\n      #   expr: |\n      #     argocd_app_info{sync_status!=\"Synced\"} == 1\n      #   for: 12h\n      #   labels:\n      #     severity: warning\n      #   annotations:\n      #     summary: \"[{{`{{$labels.name}}`}}] Application not synchronized\"\n      #     description: \u003e\n      #       The application [{{`{{$labels.name}}`}} has not been synchronized for over\n      #       12 hours which means that the state of this cloud has drifted away from the\n      #       state inside Git.\n    #   selector:\n    #     prometheus: kube-prometheus\n    #   namespace: monitoring\n    #   additionalLabels: {}\n\n  ## Enable Admin ClusterRole resources.\n  ## Enable if you would like to grant rights to ArgoCD to deploy to the local Kubernetes cluster.\n  clusterAdminAccess:\n    enabled: true\n  ## Enable Custom Rules for the Application Controller's Cluster Role resource\n  ## Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.\n  ## Defaults to off\n  clusterRoleRules:\n    enabled: false\n    rules: []\n\n\n## Dex\ndex:\n  enabled: true\n  name: dex-server\n\n  metrics:\n    enabled: false\n    service:\n      annotations: {}\n      labels: {}\n    serviceMonitor:\n      enabled: false\n      interval: 30s\n      # selector:\n      #   prometheus: kube-prometheus\n      # namespace: monitoring\n      # additionalLabels: {}\n\n  image:\n    repository: ghcr.io/dexidp/dex\n    tag: v2.27.0\n    imagePullPolicy: IfNotPresent\n  initImage:\n    repository:\n    tag:\n    imagePullPolicy:\n\n  ## Environment variables to pass to the Dex server\n  ##\n  env: []\n\n  ## envFrom to pass to the Dex server\n  envFrom: []\n  # - configMapRef:\n  #     name: config-map-name\n  # - secretRef:\n  #     name: secret-name\n\n  ## Annotations to be added to the Dex server pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to the Dex server pods\n  ##\n  podLabels: {}\n\n  serviceAccount:\n    create: true\n    name: argocd-dex-server\n    ## Annotations applied to created service account\n    annotations: {}\n    ## Automount API credentials for the Service Account\n    automountServiceAccountToken: true\n\n  ## Additional volumeMounts to the controller main container.\n  volumeMounts:\n    - name: static-files\n      mountPath: /shared\n\n  ## Additional volumes to the controller pod.\n  volumes:\n    - name: static-files\n      emptyDir: {}\n\n  ## Dex deployment container ports\n  containerPortHttp: 5556\n  servicePortHttp: 5556\n  containerPortGrpc: 5557\n  servicePortGrpc: 5557\n  containerPortMetrics: 5558\n  servicePortMetrics: 5558\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n    # readOnlyRootFilesystem: true\n\n  resources: {}\n  #  limits:\n  #    cpu: 50m\n  #    memory: 64Mi\n  #  requests:\n  #    cpu: 10m\n  #    memory: 32Mi\n\n## Redis\nredis:\n  enabled: true\n  name: redis\n\n  image:\n    repository: redis\n    tag: 6.2.2-alpine\n    imagePullPolicy: IfNotPresent\n\n  ## Additional command line arguments to pass to redis-server\n  ##\n  extraArgs: []\n  # - --bind\n  # - \"0.0.0.0\"\n\n  containerPort: 6379\n  servicePort: 6379\n\n  ## Environment variables to pass to the Redis server\n  ##\n  env: []\n\n  ## envFrom to pass to the Redis server\n  ##\n  envFrom: []\n  # - configMapRef:\n  #     name: config-map-name\n  # - secretRef:\n  #     name: secret-name\n\n  ## Annotations to be added to the Redis server pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to the Redis server pods\n  ##\n  podLabels: {}\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n    # readOnlyRootFilesystem: true\n\n  ## Redis Pod specific security context\n  securityContext:\n    runAsUser: 1000\n    runAsGroup: 1000\n    fsGroup: 1000\n    runAsNonRoot: true\n\n  resources: {}\n  #  limits:\n  #    cpu: 200m\n  #    memory: 128Mi\n  #  requests:\n  #    cpu: 100m\n  #    memory: 64Mi\n\n  volumeMounts: []\n  volumes: []\n\n# This key configures Redis-HA subchart and when enabled (redis-ha.enabled=true)\n# the custom redis deployment is omitted\nredis-ha:\n  enabled: false\n  # Check the redis-ha chart for more properties\n  exporter:\n    enabled: true\n  persistentVolume:\n    enabled: false\n  redis:\n    masterGroupName: argocd\n    config:\n      save: '\"\"'\n  haproxy:\n    enabled: true\n    metrics:\n      enabled: true\n  image:\n    tag: 6.2.2-alpine\n\n## Server\nserver:\n  name: server\n\n  replicas: 1\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 5\n    targetCPUUtilizationPercentage: 80\n    targetMemoryUtilizationPercentage: 80\n\n  image:\n    repository: # defaults to global.image.repository\n    tag: # defaults to global.image.tag\n    imagePullPolicy: # IfNotPresent\n\n  ## Additional command line arguments to pass to argocd-server\n  ##\n  extraArgs: []\n  #  - --insecure\n\n  ## Environment variables to pass to argocd-server\n  ##\n  env: []\n\n  ## envFrom to pass to argocd-server\n  ##\n  envFrom: []\n  # - configMapRef:\n  #     name: config-map-name\n  # - secretRef:\n  #     name: secret-name\n\n  ## Specify postStart and preStop lifecycle hooks for your argo-cd-server container\n  ##\n  lifecycle: {}\n\n  ## Argo server log format: text|json\n  logFormat: text\n  ## Argo server log level\n  logLevel: info\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to controller pods\n  ##\n  podLabels: {}\n\n  ## Configures the server port\n  containerPort: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n\n  ## Additional volumeMounts to the server main container.\n  volumeMounts: []\n\n  ## Additional volumes to the controller pod.\n  volumes: []\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n    # readOnlyRootFilesystem: true\n\n  resources: {}\n  #  limits:\n  #    cpu: 100m\n  #    memory: 128Mi\n  #  requests:\n  #    cpu: 50m\n  #    memory: 64Mi\n\n  ## Certificate configuration\n  certificate:\n    enabled: false\n    domain: argocd.example.com\n    issuer: {}\n    additionalHosts: []\n\n  ## Server service configuration\n  service:\n    annotations: {}\n    labels: {}\n    type: NodePort\n    ## For node port default ports\n    nodePortHttp: 30080\n    nodePortHttps: 30443\n    servicePortHttp: 80\n    servicePortHttps: 443\n    servicePortHttpName: http\n    servicePortHttpsName: https\n    namedTargetPort: true\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n    externalIPs: []\n    externalTrafficPolicy: \"\"\n\n  ## Server metrics service configuration\n  metrics:\n    enabled: false\n    service:\n      annotations: {}\n      labels: {}\n      servicePort: 8083\n    serviceMonitor:\n      enabled: false\n      interval: 30s\n    #   selector:\n    #     prometheus: kube-prometheus\n    #   namespace: monitoring\n    #   additionalLabels: {}\n\n  serviceAccount:\n    create: true\n    name: argocd-server\n    ## Annotations applied to created service account\n    annotations: {}\n    ## Automount API credentials for the Service Account\n    automountServiceAccountToken: true\n\n  ingress:\n    enabled: false\n    annotations: {}\n    labels: {}\n    ingressClassName: \"\"\n\n    ## Argo Ingress.\n    ## Hostnames must be provided if Ingress is enabled.\n    ## Secrets must be manually created in the namespace\n    ##\n    hosts:\n      []\n      # - argocd.example.com\n    paths:\n      - /\n    extraPaths:\n      []\n      # - path: /*\n      #   backend:\n      #     serviceName: ssl-redirect\n      #     servicePort: use-annotation\n      ## for Kubernetes \u003e=1.19 (when \"networking.k8s.io/v1\" is used)\n      # - path: /*\n      #   pathType: Prefix\n      #   backend:\n      #     service\n      #       name: ssl-redirect\n      #       port:\n      #         name: use-annotation\n    tls:\n      []\n      # - secretName: argocd-tls-certificate\n      #   hosts:\n      #     - argocd.example.com\n    https: false\n  # dedicated ingress for gRPC as documented at\n  # https://argoproj.github.io/argo-cd/operator-manual/ingress/\n  ingressGrpc:\n    enabled: false\n    annotations: {}\n    labels: {}\n    ingressClassName: \"\"\n\n    ## Argo Ingress.\n    ## Hostnames must be provided if Ingress is enabled.\n    ## Secrets must be manually created in the namespace\n    ##\n    hosts:\n      []\n      # - argocd.example.com\n    paths:\n      - /\n    extraPaths:\n      []\n      # - path: /*\n      #   backend:\n      #     serviceName: ssl-redirect\n      #     servicePort: use-annotation\n      ## for Kubernetes \u003e=1.19 (when \"networking.k8s.io/v1\" is used)\n      # - path: /*\n      #   pathType: Prefix\n      #   backend:\n      #     service\n      #       name: ssl-redirect\n      #       port:\n      #         name: use-annotation\n    tls:\n      []\n      # - secretName: argocd-tls-certificate\n      #   hosts:\n      #     - argocd.example.com\n    https: false\n\n  # Create a OpenShift Route with SSL passthrough for UI and CLI\n  # Consider setting 'hostname' e.g. https://argocd.apps-crc.testing/ using your Default Ingress Controller Domain\n  # Find your domain with: kubectl describe --namespace=openshift-ingress-operator ingresscontroller/default | grep Domain:\n  # If 'hostname' is an empty string \"\" OpenShift will create a hostname for you.\n  route:\n    enabled: false\n    hostname: \"\"\n\n  ## ArgoCD config\n  ## reference https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml\n  configEnabled: true\n  config:\n    # Argo CD's externally facing base URL (optional). Required when configuring SSO\n    url: https://argocd.example.com\n    # Argo CD instance label key\n    application.instanceLabelKey: argocd.argoproj.io/instance\n    repositories: |\n      - url: git@github.com:arpovea/arp_demo_app.git\n        sshPrivateKeySecret:\n          name: argocd-repository-credentials\n          key: argocd\n    #   - type: helm\n    #     url: https://charts.helm.sh/stable\n    #     name: stable\n    #   - type: helm\n    #     url: https://argoproj.github.io/argo-helm\n    #     name: argo\n    # oidc.config: |\n    #   name: AzureAD\n    #   issuer: https://login.microsoftonline.com/TENANT_ID/v2.0\n    #   clientID: CLIENT_ID\n    #   clientSecret: $oidc.azuread.clientSecret\n    #   requestedIDTokenClaims:\n    #     groups:\n    #       essential: true\n    #   requestedScopes:\n    #     - openid\n    #     - profile\n    #     - email\n\n  ## Annotations to be added to ArgoCD ConfigMap\n  configAnnotations: {}\n\n  ## ArgoCD rbac config\n  ## reference https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md\n  rbacConfig:\n    {}\n    # policy.csv is an file containing user-defined RBAC policies and role definitions (optional).\n    # Policy rules are in the form:\n    #   p, subject, resource, action, object, effect\n    # Role definitions and bindings are in the form:\n    #   g, subject, inherited-subject\n    # See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.\n    # policy.csv: |\n    #   # Grant all members of the group 'my-org:team-alpha; the ability to sync apps in 'my-project'\n    #   p, my-org:team-alpha, applications, sync, my-project/*, allow\n    #   # Grant all members of 'my-org:team-beta' admins\n    #   g, my-org:team-beta, role:admin\n    # policy.default is the name of the default role which Argo CD will falls back to, when\n    # authorizing API requests (optional). If omitted or empty, users may be still be able to login,\n    # but will see no apps, projects, etc...\n    # policy.default: role:readonly\n    # scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).\n    # If omitted, defaults to: '[groups]'. The scope value can be a string, or a list of strings.\n    # scopes: '[cognito:groups, email]'\n\n  ## Annotations to be added to ArgoCD rbac ConfigMap\n  rbacConfigAnnotations: {}\n\n  # Boolean determining whether or not to create the configmap. If false, it is expected the configmap will be created\n  # by something else. ArgoCD will not work if there is no configMap created with the name above.\n  rbacConfigCreate: true\n\n  ## Not well tested and not well supported on release v1.0.0.\n  ## Applications\n  ## reference: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/\n  additionalApplications:\n  - name: demoapp\n    additionalLabels: {}\n    additionalAnnotations: {}\n    project: default\n    source:\n      repoURL: git@github.com:arpovea/arp_demo_app.git\n      targetRevision: HEAD\n      path: .\n    destination:\n      server: https://kubernetes.default.svc\n      namespace: sock-shop\n    syncPolicy:\n      automated:\n        prune: true\n        selfHeal: true\n\n  ## Projects\n  ## reference: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/\n  additionalProjects: []\n  # - name: guestbook\n  #   namespace: argocd\n  #   additionalLabels: {}\n  #   additionalAnnotations: {}\n  #   description: Example Project\n  #   sourceRepos:\n  #   - '*'\n  #   destinations:\n  #   - namespace: guestbook\n  #     server: https://kubernetes.default.svc\n  #   clusterResourceWhitelist: []\n  #   namespaceResourceBlacklist:\n  #   - group: ''\n  #     kind: ResourceQuota\n  #   - group: ''\n  #     kind: LimitRange\n  #   - group: ''\n  #     kind: NetworkPolicy\n  #     orphanedResources: {}\n  #     roles: []\n  #   namespaceResourceWhitelist:\n  #   - group: 'apps'\n  #     kind: Deployment\n  #   - group: 'apps'\n  #     kind: StatefulSet\n  #   orphanedResources: {}\n  #   roles: []\n  #   syncWindows:\n  #   - kind: allow\n  #     schedule: '10 1 * * *'\n  #     duration: 1h\n  #     applications:\n  #     - '*-prod'\n  #     manualSync: true\n\n  ## Enable Admin ClusterRole resources.\n  ## Enable if you would like to grant rights to ArgoCD to deploy to the local Kubernetes cluster.\n  clusterAdminAccess:\n    enabled: true\n\n  ## Enable BackendConfig custom resource for Google Kubernetes Engine\n  GKEbackendConfig:\n    enabled: false\n    spec: {}\n  #  spec:\n  #    iap:\n  #      enabled: true\n  #      oauthclientCredentials:\n  #        secretName: argocd-secret\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  # - name: my-sidecar\n  #   image: nginx:latest\n  # - name: lemonldap-ng-controller\n  #   image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #   args:\n  #     - /lemonldap-ng-controller\n  #     - --alsologtostderr\n  #     - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #   env:\n  #     - name: POD_NAME\n  #       valueFrom:\n  #         fieldRef:\n  #           fieldPath: metadata.name\n  #     - name: POD_NAMESPACE\n  #       valueFrom:\n  #         fieldRef:\n  #           fieldPath: metadata.namespace\n  #   volumeMounts:\n  #   - name: copy-portal-skins\n  #     mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n## Repo Server\nrepoServer:\n  name: repo-server\n\n  replicas: 1\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 5\n    targetCPUUtilizationPercentage: 80\n    targetMemoryUtilizationPercentage: 80\n\n  image:\n    repository: # defaults to global.image.repository\n    tag: # defaults to global.image.tag\n    imagePullPolicy: # IfNotPresent\n\n  ## Additional command line arguments to pass to argocd-repo-server\n  ##\n  extraArgs: []\n\n  ## Environment variables to pass to argocd-repo-server\n  ##\n  env: []\n\n  ## envFrom to pass to argocd-repo-server\n  ##\n  envFrom: []\n  # - configMapRef:\n  #     name: config-map-name\n  # - secretRef:\n  #     name: secret-name\n\n  ## Argo repoServer log format: text|json\n  logFormat: text\n  ## Argo repoServer log level\n  logLevel: info\n\n  ## Annotations to be added to repo server pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to repo server pods\n  ##\n  podLabels: {}\n\n  ## Configures the repo server port\n  containerPort: 8081\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n\n  ## Additional volumeMounts to the repo server main container.\n  volumeMounts: []\n\n  ## Additional volumes to the repo server pod.\n  volumes: []\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n    # readOnlyRootFilesystem: true\n\n  resources: {}\n  #  limits:\n  #    cpu: 50m\n  #    memory: 128Mi\n  #  requests:\n  #    cpu: 10m\n  #    memory: 64Mi\n\n  ## Repo server service configuration\n  service:\n    annotations: {}\n    labels: {}\n    port: 8081\n    portName: https-repo-server\n\n  ## Repo server metrics service configuration\n  metrics:\n    enabled: false\n    service:\n      annotations: {}\n      labels: {}\n      servicePort: 8084\n    serviceMonitor:\n      enabled: false\n      interval: 30s\n    #   selector:\n    #     prometheus: kube-prometheus\n    #   namespace: monitoring\n    #   additionalLabels: {}\n\n  ## Repo server service account\n  ## If create is set to true, make sure to uncomment the name and update the rbac section below\n  serviceAccount:\n    create: false\n    #  name: argocd-repo-server\n    ## Annotations applied to created service account\n    annotations: {}\n    ## Automount API credentials for the Service Account\n    automountServiceAccountToken: true\n\n  ## Repo server rbac rules\n  # rbac:\n  #   - apiGroups:\n  #     - argoproj.io\n  #     resources:\n  #     - applications\n  #     verbs:\n  #     - get\n  #     - list\n  #     - watch\n\n  ## Use init containers to configure custom tooling\n  ## https://argoproj.github.io/argo-cd/operator-manual/custom_tools/\n  ## When using the volumes \u0026 volumeMounts section bellow, please comment out those above.\n  #  volumes:\n  #  - name: custom-tools\n  #    emptyDir: {}\n  #\n  #  initContainers:\n  #  - name: download-tools\n  #    image: alpine:3.8\n  #    command: [sh, -c]\n  #    args:\n  #      - wget -qO- https://get.helm.sh/helm-v2.16.1-linux-amd64.tar.gz | tar -xvzf - \u0026\u0026\n  #        mv linux-amd64/helm /custom-tools/\n  #    volumeMounts:\n  #      - mountPath: /custom-tools\n  #        name: custom-tools\n  #  volumeMounts:\n  #  - mountPath: /usr/local/bin/helm\n  #    name: custom-tools\n  #    subPath: helm\n\n## Argo Configs\nconfigs:\n  ## External Cluster Credentials\n  ## reference:\n  ## - https://argoproj.github.io/argo-cd/operator-manual/declarative-setup/#clusters\n  ## - https://argoproj.github.io/argo-cd/operator-manual/security/#external-cluster-credentials\n  clusterCredentials: []\n    # - name: mycluster\n    #   server: https://mycluster.com\n    #   labels: {}\n    #   annotations: {}\n    #   config:\n    #     bearerToken: \"\u003cauthentication token\u003e\"\n    #     tlsClientConfig:\n    #       insecure: false\n    #       caData: \"\u003cbase64 encoded certificate\u003e\"\n    # - name: mycluster2\n    #   server: https://mycluster2.com\n    #   labels: {}\n    #   annotations: {}\n    #   namespaces: namespace1,namespace2\n    #   config:\n    #     bearerToken: \"\u003cauthentication token\u003e\"\n    #     tlsClientConfig:\n    #       insecure: false\n    #       caData: \"\u003cbase64 encoded certificate\u003e\"\n\n  knownHostsAnnotations: {}\n  knownHosts:\n    data:\n      ssh_known_hosts: |\n        bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\n        github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\n        gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\n        gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\n        gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\n        ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n        vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n  tlsCertsAnnotations: {}\n  tlsCerts:\n    {}\n    # data:\n    #   argocd.example.com: |\n    #     -----BEGIN CERTIFICATE-----\n    #     MIIF1zCCA7+gAwIBAgIUQdTcSHY2Sxd3Tq/v1eIEZPCNbOowDQYJKoZIhvcNAQEL\n    #     BQAwezELMAkGA1UEBhMCREUxFTATBgNVBAgMDExvd2VyIFNheG9ueTEQMA4GA1UE\n    #     BwwHSGFub3ZlcjEVMBMGA1UECgwMVGVzdGluZyBDb3JwMRIwEAYDVQQLDAlUZXN0\n    #     c3VpdGUxGDAWBgNVBAMMD2Jhci5leGFtcGxlLmNvbTAeFw0xOTA3MDgxMzU2MTda\n    #     Fw0yMDA3MDcxMzU2MTdaMHsxCzAJBgNVBAYTAkRFMRUwEwYDVQQIDAxMb3dlciBT\n    #     YXhvbnkxEDAOBgNVBAcMB0hhbm92ZXIxFTATBgNVBAoMDFRlc3RpbmcgQ29ycDES\n    #     MBAGA1UECwwJVGVzdHN1aXRlMRgwFgYDVQQDDA9iYXIuZXhhbXBsZS5jb20wggIi\n    #     MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCv4mHMdVUcafmaSHVpUM0zZWp5\n    #     NFXfboxA4inuOkE8kZlbGSe7wiG9WqLirdr39Ts+WSAFA6oANvbzlu3JrEQ2CHPc\n    #     CNQm6diPREFwcDPFCe/eMawbwkQAPVSHPts0UoRxnpZox5pn69ghncBR+jtvx+/u\n    #     P6HdwW0qqTvfJnfAF1hBJ4oIk2AXiip5kkIznsAh9W6WRy6nTVCeetmIepDOGe0G\n    #     ZJIRn/OfSz7NzKylfDCat2z3EAutyeT/5oXZoWOmGg/8T7pn/pR588GoYYKRQnp+\n    #     YilqCPFX+az09EqqK/iHXnkdZ/Z2fCuU+9M/Zhrnlwlygl3RuVBI6xhm/ZsXtL2E\n    #     Gxa61lNy6pyx5+hSxHEFEJshXLtioRd702VdLKxEOuYSXKeJDs1x9o6cJ75S6hko\n    #     Ml1L4zCU+xEsMcvb1iQ2n7PZdacqhkFRUVVVmJ56th8aYyX7KNX6M9CD+kMpNm6J\n    #     kKC1li/Iy+RI138bAvaFplajMF551kt44dSvIoJIbTr1LigudzWPqk31QaZXV/4u\n    #     kD1n4p/XMc9HYU/was/CmQBFqmIZedTLTtK7clkuFN6wbwzdo1wmUNgnySQuMacO\n    #     gxhHxxzRWxd24uLyk9Px+9U3BfVPaRLiOPaPoC58lyVOykjSgfpgbus7JS69fCq7\n    #     bEH4Jatp/10zkco+UQIDAQABo1MwUTAdBgNVHQ4EFgQUjXH6PHi92y4C4hQpey86\n    #     r6+x1ewwHwYDVR0jBBgwFoAUjXH6PHi92y4C4hQpey86r6+x1ewwDwYDVR0TAQH/\n    #     BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAFE4SdKsX9UsLy+Z0xuHSxhTd0jfn\n    #     Iih5mtzb8CDNO5oTw4z0aMeAvpsUvjJ/XjgxnkiRACXh7K9hsG2r+ageRWGevyvx\n    #     CaRXFbherV1kTnZw4Y9/pgZTYVWs9jlqFOppz5sStkfjsDQ5lmPJGDii/StENAz2\n    #     XmtiPOgfG9Upb0GAJBCuKnrU9bIcT4L20gd2F4Y14ccyjlf8UiUi192IX6yM9OjT\n    #     +TuXwZgqnTOq6piVgr+FTSa24qSvaXb5z/mJDLlk23npecTouLg83TNSn3R6fYQr\n    #     d/Y9eXuUJ8U7/qTh2Ulz071AO9KzPOmleYPTx4Xty4xAtWi1QE5NHW9/Ajlv5OtO\n    #     OnMNWIs7ssDJBsB7VFC8hcwf79jz7kC0xmQqDfw51Xhhk04kla+v+HZcFW2AO9so\n    #     6ZdVHHQnIbJa7yQJKZ+hK49IOoBR6JgdB5kymoplLLiuqZSYTcwSBZ72FYTm3iAr\n    #     jzvt1hxpxVDmXvRnkhRrIRhK4QgJL0jRmirBjDY+PYYd7bdRIjN7WNZLFsgplnS8\n    #     9w6CwG32pRlm0c8kkiQ7FXA6BYCqOsDI8f1VGQv331OpR2Ck+FTv+L7DAmg6l37W\n    #     +LB9LGh4OAp68ImTjqf6ioGKG0RBSznwME+r4nXtT1S/qLR6ASWUS4ViWRhbRlNK\n    #     XWyb96wrUlv+E8I=\n    #     -----END CERTIFICATE-----\n  # Creates a secret with optional repository credentials\n  repositoryCredentials:\n    argocd:  |\n                -----BEGIN OPENSSH PRIVATE KEY-----\n                b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\n                QyNTUxOQAAACB0GCJiBKVhjud/cupd2c+k0KW/rq3Bp8kKle6+EZesZwAAAKBa3qAvWt6g\n                LwAAAAtzc2gtZWQyNTUxOQAAACB0GCJiBKVhjud/cupd2c+k0KW/rq3Bp8kKle6+EZesZw\n                AAAEAgMRbCo9Eqtj/p4ImPWfawMoZxZj3/9w5KjQtHUPJuD3QYImIEpWGO539y6l3Zz6TQ\n                pb+urcGnyQqV7r4Rl6xnAAAAFmNpYmVyb2xtb3NAaG90bWFpbC5jb20BAgMEBQYH\n                -----END OPENSSH PRIVATE KEY-----\n                \n\n    # sample-ssh-key: |\n    # -----BEGIN RSA PRIVATE KEY-----\n    # MIICXAIBAAKBgQCcmiVJXGUvL8zqWmRRETbCKgFadtjJ9WDQpSwiZzMiktpYBo0N\n    # z0cThzGQfWqvdiJYEy72MrKCaSYssV3eHP5zTffk4VBDktNfdl1kgkOpqnh7tQO4\n    # nBONRLzcK6KEbKUsmiTbW8Jb4UFYDhyyyveby7y3vYePmaRQIrlEenVfKwIDAQAB\n    # AoGAbbg+WZjnt9jYzHWKhZX29LDzg8ty9oT6URT4yB3gIOAdJMFqQHuyg8cb/e0x\n    # O0AcrfK623oHwgEj4vpeFwnfaBdtM5GfH9zaj6pnXV7VZc3oBHrBnHUgFT3NEYUe\n    # tt6rtatIguBH61Aj/pyij9sOfF0xDj0s1nwFTbdHtZR/31kCQQDIwcVTqhKkDNW6\n    # cvdz+Wt3v9x1wNg+VhZhyA/pKILz3+qtn3GogLrQqhpVi+Y7tdvEv9FvgKaCjUp8\n    # 6Lfp6dDFAkEAx7HpQbXFdrtcveOi9kosKRDX1PT4zdhB08jAXGlV8jr0jkrZazVM\n    # hV5rVCuu35Vh6x1fiyGwwiVsqhgWE+KPLwJAWrDemasM/LsnmjDxhJy6ZcBwsWlK\n    # xu5Q8h9UwLmiXtVayNBsofh1bGpLtzWZ7oN7ImidDkgJ8JQvgDoJS0xrGQJBALPJ\n    # FkMFnrjtqGqBVkc8shNqyZY90v6oM2OzupO4dht2PpUZCDPAMZtlTWXjSjabbCPc\n    # NxexBk1UmkdtFftjHxsCQGjG+nhRYH92MsmrbvZyFzgxg9SIOu6xel7D3Dq9l5Le\n    # XG+bpHPF4SiCpAxthP5WNa17zuvk+CDsMZgZNuhYNMo=\n    # -----END RSA PRIVATE KEY-----\n  secret:\n    createSecret: true\n    ## Annotations to be added to argocd-secret\n    ##\n    annotations: {}\n\n    # Webhook Configs\n    githubSecret: \"\"\n    gitlabSecret: \"\"\n    bitbucketServerSecret: \"\"\n    bitbucketUUID: \"\"\n    gogsSecret: \"\"\n\n    # Custom secrets. Useful for injecting SSO secrets into environment variables.\n    # Ref: https://argoproj.github.io/argo-cd/operator-manual/sso/\n    # Note that all values must be non-empty.\n    extra:\n      {}\n      # LDAP_PASSWORD: \"mypassword\"\n\n    # Argo TLS Data.\n    argocdServerTlsConfig:\n      {}\n      # key:\n      # crt: |\n      #   -----BEGIN CERTIFICATE-----\n      #   \u003ccert data\u003e\n      #   -----END CERTIFICATE-----\n      #   -----BEGIN CERTIFICATE-----\n      #   \u003cca cert data\u003e\n      #   -----END CERTIFICATE-----\n\n    # Argo expects the password in the secret to be bcrypt hashed. You can create this hash with\n    # `htpasswd -nbBC 10 \"\" $ARGO_PWD | tr -d ':\\n' | sed 's/$2y/$2a/'`\n    # argocdServerAdminPassword: \"\"\n    # Password modification time defaults to current time if not set\n    # argocdServerAdminPasswordMtime: \"2006-01-02T15:04:05Z\"\n\n  ## Custom CSS Styles\n  ## Reference: https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles/\n  # styles: |\n  #  .nav-bar {\n  #    background: linear-gradient(to bottom, #999, #777, #333, #222, #111);\n  #  }\n\nopenshift:\n  enabled: false"
            ],
            "verify": false,
            "version": "3.28.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.google_client_config.current",
            "data.google_client_openid_userinfo.terraform_user",
            "google_compute_network.vpc_proyecto_asir",
            "google_compute_subnetwork.subnet_proyecto_asir",
            "google_container_cluster.primary",
            "google_container_node_pool.primary_nodes",
            "kubernetes_cluster_role_binding.user",
            "kubernetes_namespace.herramientas"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "helm_ingress_controler_herramientas",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "ingress-nginx",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "ingresscontr-herram",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "0.40.2",
                "chart": "ingress-nginx",
                "name": "ingresscontr-herram",
                "namespace": "herramientas",
                "revision": 2,
                "values": "{\"controller\":{\"scope\":{\"enabled\":true,\"namespace\":\"herramientas\"},\"service\":{\"loadBalancerIP\":\"34.127.109.4\"}}}",
                "version": "3.5.1"
              }
            ],
            "name": "ingresscontr-herram",
            "namespace": "herramientas",
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://kubernetes.github.io/ingress-nginx",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "controller.scope.enabled",
                "type": null,
                "value": "true"
              },
              {
                "name": "controller.scope.namespace",
                "type": null,
                "value": "herramientas"
              },
              {
                "name": "controller.service.loadBalancerIP",
                "type": "",
                "value": "34.127.109.4"
              }
            ],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": null,
            "verify": false,
            "version": "3.5.1",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.google_client_config.current",
            "google_compute_address.ipv4_2",
            "google_container_cluster.primary",
            "google_container_node_pool.primary_nodes",
            "helm_release.helm_argocd",
            "kubernetes_namespace.herramientas"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "helm_ingress_controler_sock-shop",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "ingress-nginx",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "ingresscontr-calcet",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "0.40.2",
                "chart": "ingress-nginx",
                "name": "ingresscontr-calcet",
                "namespace": "sock-shop",
                "revision": 2,
                "values": "{\"controller\":{\"scope\":{\"enabled\":true,\"namespace\":\"sock-shop\"},\"service\":{\"loadBalancerIP\":\"34.127.28.78\"}}}",
                "version": "3.5.1"
              }
            ],
            "name": "ingresscontr-calcet",
            "namespace": "sock-shop",
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://kubernetes.github.io/ingress-nginx",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "controller.scope.enabled",
                "type": null,
                "value": "true"
              },
              {
                "name": "controller.scope.namespace",
                "type": null,
                "value": "sock-shop"
              },
              {
                "name": "controller.service.loadBalancerIP",
                "type": "",
                "value": "34.127.28.78"
              }
            ],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": null,
            "verify": false,
            "version": "3.5.1",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.google_client_config.current",
            "google_compute_address.ipv4_1",
            "google_container_cluster.primary",
            "helm_release.helm_argocd",
            "kubernetes_namespace.sock_shop"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_cluster_role_binding",
      "name": "user",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "olmos",
            "metadata": [
              {
                "annotations": {},
                "generation": 0,
                "labels": {},
                "name": "olmos",
                "resource_version": "2408",
                "uid": "8ebfabec-2d60-449b-b27c-f3319c1a0fc4"
              }
            ],
            "role_ref": [
              {
                "api_group": "rbac.authorization.k8s.io",
                "kind": "ClusterRole",
                "name": "cluster-admin"
              }
            ],
            "subject": [
              {
                "api_group": "rbac.authorization.k8s.io",
                "kind": "User",
                "name": "kubernetes@proyecto-asir-333123.iam.gserviceaccount.com",
                "namespace": "default"
              },
              {
                "api_group": "rbac.authorization.k8s.io",
                "kind": "Group",
                "name": "system:masters",
                "namespace": "default"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.google_client_config.current",
            "data.google_client_openid_userinfo.terraform_user",
            "google_compute_network.vpc_proyecto_asir",
            "google_compute_subnetwork.subnet_proyecto_asir",
            "google_container_cluster.primary",
            "google_container_node_pool.primary_nodes"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_ingress",
      "name": "ingress-argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "herramientas/ingress-argocd",
            "metadata": [
              {
                "annotations": {
                  "kubernetes.io/ingress.class": "nginx",
                  "nginx.ingress.kubernetes.io/backend-protocol": "HTTPS"
                },
                "generate_name": "",
                "generation": 1,
                "labels": {},
                "name": "ingress-argocd",
                "namespace": "herramientas",
                "resource_version": "3629",
                "uid": "5e977407-7499-489f-ad7f-dbf92a62d494"
              }
            ],
            "spec": [
              {
                "backend": [],
                "ingress_class_name": "",
                "rule": [
                  {
                    "host": "argocd.proyecto-asir.com",
                    "http": [
                      {
                        "path": [
                          {
                            "backend": [
                              {
                                "service_name": "argocd-server",
                                "service_port": "80"
                              }
                            ],
                            "path": "/"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "tls": []
              }
            ],
            "status": [
              {
                "load_balancer": [
                  {
                    "ingress": [
                      {
                        "hostname": "",
                        "ip": "35.247.125.0"
                      }
                    ]
                  }
                ]
              }
            ],
            "wait_for_load_balancer": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.google_client_config.current",
            "data.google_client_openid_userinfo.terraform_user",
            "google_compute_address.ipv4_2",
            "google_compute_network.vpc_proyecto_asir",
            "google_compute_subnetwork.subnet_proyecto_asir",
            "google_container_cluster.primary",
            "google_container_node_pool.primary_nodes",
            "helm_release.helm_argocd",
            "helm_release.helm_ingress_controler_herramientas",
            "kubernetes_cluster_role_binding.user",
            "kubernetes_namespace.herramientas"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_ingress",
      "name": "ingress-calcetines",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "sock-shop/ingress-calcetines",
            "metadata": [
              {
                "annotations": {
                  "kubernetes.io/ingress.class": "nginx"
                },
                "generate_name": "",
                "generation": 1,
                "labels": {},
                "name": "ingress-calcetines",
                "namespace": "sock-shop",
                "resource_version": "3628",
                "uid": "c541c4b2-7ba8-4666-9b40-a80c6c35f41e"
              }
            ],
            "spec": [
              {
                "backend": [],
                "ingress_class_name": "",
                "rule": [
                  {
                    "host": "calcetines.proyecto-asir.com",
                    "http": [
                      {
                        "path": [
                          {
                            "backend": [
                              {
                                "service_name": "front-end",
                                "service_port": "80"
                              }
                            ],
                            "path": "/"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "tls": []
              }
            ],
            "status": [
              {
                "load_balancer": [
                  {
                    "ingress": [
                      {
                        "hostname": "",
                        "ip": "34.83.224.123"
                      }
                    ]
                  }
                ]
              }
            ],
            "wait_for_load_balancer": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.google_client_config.current",
            "data.google_client_openid_userinfo.terraform_user",
            "google_compute_address.ipv4_1",
            "google_compute_network.vpc_proyecto_asir",
            "google_compute_subnetwork.subnet_proyecto_asir",
            "google_container_cluster.primary",
            "google_container_node_pool.primary_nodes",
            "helm_release.helm_argocd",
            "helm_release.helm_ingress_controler_sock-shop",
            "kubernetes_cluster_role_binding.user",
            "kubernetes_namespace.herramientas",
            "kubernetes_namespace.sock_shop"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "herramientas",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "herramientas",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "herramientas",
                "resource_version": "2409",
                "uid": "1ebc537e-a77d-432d-bdbc-3c6b37790e8b"
              }
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.google_client_config.current",
            "data.google_client_openid_userinfo.terraform_user",
            "google_compute_network.vpc_proyecto_asir",
            "google_compute_subnetwork.subnet_proyecto_asir",
            "google_container_cluster.primary",
            "google_container_node_pool.primary_nodes",
            "kubernetes_cluster_role_binding.user"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "sock_shop",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "sock-shop",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "sock-shop",
                "resource_version": "2410",
                "uid": "91d5baf9-42d1-4474-b66b-1497d35f8e51"
              }
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.google_client_config.current",
            "data.google_client_openid_userinfo.terraform_user",
            "google_compute_network.vpc_proyecto_asir",
            "google_compute_subnetwork.subnet_proyecto_asir",
            "google_container_cluster.primary",
            "google_container_node_pool.primary_nodes",
            "kubernetes_cluster_role_binding.user"
          ]
        }
      ]
    }
  ]
}
